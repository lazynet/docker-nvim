call plug#begin('~/.config/nvim/plugged')
" Este es mi comentario
" Plugins {
"Genericos
" ctrl-p is a fuzzy file finder.
Plug 'kien/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'kablamo/vim-git-log'
Plug 'gregsexton/gitv'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'ervandew/supertab'
Plug 'wesQ3/vim-windowswap'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'
Plug 'godlygeek/tabular'
Plug 'benmills/vimux'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'gilsondev/searchtasks.vim'
Plug 'Shougo/neocomplete.vim'
Plug 'tpope/vim-dispatch'
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating'
Plug 'Chiel92/vim-autoformat'
"Python

"Thmes
" airline is a better status line and a tab-bar for nvim.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" gruvbox colorscheme. Seems to work the best for me.
Plug 'morhetz/gruvbox'

"Programming
" neomake is a code linting tool that runs in the background.
Plug 'neomake/neomake'
"



Plug 'scrooloose/syntastic'
Plug 'pearofducks/ansible-vim'
"Plug 'valloric/youcompleteme'
Plug 'scrooloose/nerdcommenter'
Plug 'Shougo/deoplete.nvim'
Plug 'tpope/vim-surround'
Plug 'hynek/vim-python-pep8-indent'
Plug 'ryanoasis/vim-devicons'
Plug 'benmills/vimux'



" }

call plug#end()

" Map the leader key to ,
let mapleader="\,"

" General {
"set noautoindent        " I indent my code myself.
"set nocindent           " I indent my code myself.
set smartindent        " Or I let the smartindent take care of it.
set hid
set ttimeout
set ttimeoutlen=100
set mouse=a
set nocompatible
set shell=zsh
" }

" Search {
set ignorecase          " Make searching case insensitive
set smartcase           " ... unless the query has capital letters.
set gdefault            " Use 'g' flag by default with :s/foo/bar/.

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif
" }

" Formatting {
set encoding=utf8
set hidden
set showmatch           " Show matching brackets.
set number              " Show the line numbers on the left side.
set ruler
set formatoptions+=o    " Continue comment marker in new lines.
set textwidth=0         " Hard-wrap long lines as you type them.
set expandtab           " Insert spaces when TAB is pressed.
set tabstop=4           " Render TABs using this many spaces.
set shiftwidth=4        " Indentation amount for < and > commands.
set softtabstop=4       " 4 space tab
set shiftwidth=4
set linespace=0         " Set line-spacing to minimum.
set nojoinspaces        " Prevents inserting two spaces after punctuation on a join (J)
set autoindent
set showcmd
set cursorline
set smarttab
set nowrap
" More natural splits
set splitbelow          " Horizontal split below current.
set splitright          " Vertical split to right of current.

if !&scrolloff
    set scrolloff=3       " Show next 3 lines while scrolling.
endif
if !&sidescrolloff
    set sidescrolloff=5   " Show next 5 columns while side-scrolling.
endif
set nostartofline       " Do not jump to first character with page commands.

" Tell Vim which characters to show for expanded TABs,
" trailing whitespace, and end-of-lines. VERY useful!
if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif
set list                " Show problematic characters.
" }

" Configuration {
"set autochdir           " Switch to current file's parent directory.
autocmd  vimenter * NERDTree
" Remove special characters for filename
set isfname-=:
set isfname-==
set isfname-=+

" Map ; to :
nnoremap ; :

if &undolevels < 200
    set undolevels=200    " Number of undo levels.
endif

" Path/file expansion in colon-mode.
set wildmode=list:longest
set wildchar=<TAB>

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
    set t_Co=16
endif

" Remove trailing spaces.
function! TrimWhitespace()
    let l:save = winsaveview()
    %s/\s\+$//e
    call winrestview(l:save)
endfunction
" FIXME: Do not call this on makefile and sv files.
autocmd BufWritePre * call TrimWhitespace()
nnoremap <leader>W :call TrimWhitespace()<CR>

" Diff options
set diffopt+=iwhite


"To toggle quickly between active buffers, I use this mapping:
"noremap v :b#
"Select all text in buffer
noremap a ggVG
"Indent in visual Mod"Indent in visual Modee \TODO Check it. Not Working
"vmap &gt;gv
"vmap &lt;gv
"To map <Esc> to exit terminal mode
tnoremap <Esc> <C-\><C-n>
" }

" UI Options {
" Colorscheme options.
set bg=dark
colorscheme gruvbox

" Also highlight all tabs and trailing whitespace characters.
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$\|\t/

" Relative numbering
function! NumberToggle()
    if(&relativenumber == 1)
        set nornu
        set number
    else
        set rnu
    endif
endfunc

" Toggle between normal and relative numbering.
nnoremap <leader>r :call NumberToggle()<cr>
" }
" Folding {{{
"=== folding ===
set foldmethod=indent   " fold based on indent level
set foldnestmax=10      " max 10 depth
set foldenable          " don't fold files by default on open
nnoremap <space> za
set foldlevelstart=10   " start with fold level of 1
" }}}

" Keybindings {
" Save file
nnoremap <Leader>w :w<CR>

" Copy and paste from system clipboard (Might require xsel/xclip install)
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" Move between buffers
"nmap <Tab> :bNext<CR>
" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>h :bp<CR>

" Move to the previous buffer
nmap <leader>j :bn<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

" Mapeo del esc a teclas mas cercanas
imap fj <esc>
imap jf <esc>
"Movimientos entre tabs
nmap <tab> gt
nmap <s-tab> gT
"Movimiento entre windows
map <C-Up>   <C-W>k
map <C-Down> <C-W>j
map <C-Left> <C-W>h
map <C-Right> <C-W>l

"Enter to go to EOF and backspace to go to start
nnoremap <CR> G
nnoremap <BS> gg
" Stop cursor from jumping over wrapped lines
nnoremap j gj
nnoremap k gk
" Make HOME and END behave like shell
inoremap <C-E> <End>
inoremap <C-A> <Home>
"Move line up and down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv
" }


" Experimental {
" Search and Replace
nmap <Leader>s :%s//g<Left><Left>
" }

" Plugin Settings {
"Deoplete {
" Use deoplete.
let g:deoplete#enable_at_startup = 1
"}
"NERDTreeCommenter {
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1



"}
" Airline {
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_theme= 'angr'
let g:airline_powerline_fonts=1
" }
" CtrlP {
" Open file menu
nnoremap <Leader>o :CtrlP<CR>
" Open buffer menu
nnoremap <Leader>b :CtrlPBuffer<CR>
" Open most recently used files
nnoremap <Leader>f :CtrlPMRUFiles<CR>
" }
" neomake {
autocmd! BufWritePost * Neomake
nnoremap <Leader>l :lopen<CR>
" }
" neomake {
let g:netrw_liststyle=3 " tree (change to 0 for thin)
let g:netrw_banner=0    " no banner
let g:netrw_altv=1      " open files on right
let g:netrw_winsize=80  " only use 20% screen for netrw
" FIXME: Preview opens to left and is very narrow
let g:netrw_preview=1   " open previews vertically
autocmd! BufWritePost * Neomake
" }
" NERDTree {
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ 'Ignored'   : '☒',
            \ "Unknown"   : "?"
            \ }
let NERDTreeMinimalUI = 1
let g:NERDTreeShowIgnoredStatus = 1
let NERDTreeDirArrows = 1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeShowBookmarks=1
map  <F3> :NERDTreeFocus<CR>
nnoremap <Leader>n :NERDTreeToggle<Enter>
autocmd StdinReadPre * let s:std_in=1
nnoremap <silent> <Leader>v :NERDTreeFind<CR>
autocmd vimenter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
let NERDTreeQuitOnOpen = 1
"}
" syntastic {
let g:syntastic_python_checkers=['python', 'flake8']
let g:syntastic_always_populate_loc_list=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_auto_loc_list=1
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open = 1

" }
" ansible {
let g:ansible_attribute_highlight = "ob"
let g:ansible_name_highlight = 'd'
" }
"
" Fzf Configuration {
" This is the default extra key bindings
let g:fzf_action = {
            \ 'ctrl-t': 'tab split',
            \ 'ctrl-x': 'split',
            \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }

" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header':  ['fg', 'Comment'] }
"}
"Autormat {
au BufWrite * :Autoformat
"}
"
" }

" vim:set ft=vim sw=4 ts=4:
